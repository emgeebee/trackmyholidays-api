service: holidays

frameworkVersion: "3"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-apigateway-service-proxy


custom:
  myStage: ${opt:stage, self:provider.stage}

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - dev
      - prod
  authorizers:
    auth:
      name: authFunc
      type: request
      identitySource: method.request.header.Authorization
  apiGatewayServiceProxies:
    - s3:
        path: /
        method: get
        action: GetObject
        bucket:
          Ref: holidaysStaticFilesBucket
        key: 'index.html'
        cors: true
    - s3:
        path: /{asset}
        method: get
        action: GetObject
        bucket:
          Ref: holidaysStaticFilesBucket
        key:
          pathParam: asset
        cors: true

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMODB_TABLE: "holidays"
    STAGE: ${self:custom.myStage}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}-${self:custom.myStage}"
    - Effect: Allow
      Action:
        - apigateway:GET
        - apigateway:POST
        - apigateway:PUT
        - apigateway:DELETE
        - apigateway:PATCH
      Resource: "*"

functions:
  authFunc:
    handler: auth/auth.authorizer

  create:
    handler: holidays/create.create
    events:
      - http:
          path: holidays
          method: post
          cors: true
          authorizer: ${self:custom.authorizers.auth}

  get:
    handler: holidays/get.get
    events:
      - http:
          path: holidays
          method: get
          cors: true
          authorizer:
            name: authFunc
            identitySource: method.request.header.Authorization

  update:
    handler: holidays/update.update
    events:
      - http:
          path: holidays/{id}
          method: put
          cors: true
          authorizer:
            name: authFunc
            identitySource: method.request.header.Authorization

resources:
  Resources:
    holidaysStaticFilesBucket:
      Type: AWS::S3::Bucket

    # holidaysDynamoDbTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   UpdateReplacePolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE}-${self:custom.myStage}
        
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
